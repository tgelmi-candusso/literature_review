[{"name":"app.R","content":"# DT3<-readr::read_csv(\r\n#   \"C:/Users/tizge/Downloads/literature.csv\"\r\n# ) %>%\r\n#   unique()\r\n# saveRDS(DT3, \"note.rds\")\r\n# options(shiny.trace = F)  \r\nlibrary(shiny)\r\nlibrary(shinyjs)\r\nlibrary(DT)\r\nlibrary(lubridate)\r\nlibrary(shinyalert)\r\nlibrary(shinysky)\r\n\r\nrm(list = ls())\r\n### Shiny module \r\n### UI part\r\n\r\n\r\nactionButton <- function(inputId, label, styleclass = \"\", size = \"\",\r\n                         block = F, icon = NULL, icon.library = c(\"bootstrap\", \"font awesome\"),  css.class = \"\", ...) {\r\n  if (styleclass %in% c(\"primary\", \"info\", \"success\", \"warning\",\r\n                        \"danger\", \"inverse\", \"link\")) {\r\n    btn.css.class <- paste(\"btn\", styleclass, sep = \"-\")\r\n  } else btn.css.class = \"\"\r\n\r\n  if (size %in% c(\"large\", \"small\", \"mini\")) {\r\n    btn.size.class <- paste(\"btn\", size, sep = \"-\")\r\n  } else btn.size.class = \"\"\r\n\r\n  if (block) {\r\n    btn.block = \"btn-block\"\r\n  } else btn.block = \"\"\r\n\r\n  if (!is.null(icon)) {\r\n    if( !(icon.library[1] %in% c(\"font awesome\", \"bootstrap\")) ){\r\n      icon.set = \"bootstrap\"\r\n    }else{\r\n      icon.set = icon.library[1]\r\n    }\r\n    set = switch(icon.set,\r\n                 \"font awesome\" = \"fa fa-\",\r\n                 \"bootstrap\" = \"icon-\")\r\n    icon.code <- shiny::HTML(paste0(\"<i class='\", set, icon, \"'><\/i>\"))\r\n  } else icon.code = \"\"\r\n\r\n  shiny::tags$button(id = inputId, type = \"button\", class = paste(\"btn action-button\",\r\n                                                                  btn.css.class, btn.size.class, btn.block, css.class, collapse = \" \"),\r\n                     icon.code, label, ...)\r\n}\r\n\r\nmoduleUI <- function(id, temp_df, add_tag ){\r\n  \r\n  ns <- NS(id)\r\n  AA=tagList()\r\n  # return a list of tags\r\n  for (i in 1:length(colnames(temp_df) ) )\r\n  {\r\n    if (is.numeric(temp_df[[i]]))\r\n    {\r\n      AA[[i]]<-numericInput(ns(paste0(colnames(temp_df)[i],\"_add\",add_tag) ), paste0(colnames(temp_df)[i],\":\"),0)\r\n    } \r\n    # else if( is.Date(temp_df[[i]])){\r\n    #   AA[[i]]<-dateInput(paste0(colnames(temp_df)[i],\"_add\",add_tag),paste0(colnames(temp_df)[i],\":\"), Sys.Date())\r\n    # }\r\n    else{ \r\n      AA[[i]]<-textInput(ns(paste0(colnames(temp_df)[i],\"_add\",add_tag)), paste0(colnames(temp_df)[i],\":\") )\r\n    }\r\n  }\r\n  return(AA)\r\n}\r\n\r\n### Server part \r\nmodule_server<- function(input, output, session,temp_df, add_tag) {\r\n  \r\n  \r\n  dataframe=reactive({\r\n    \r\n    inputlist=list()\r\n    for (j in 1:length(colnames(temp_df) ) ){\r\n      inputlist[j]=input[[paste0(colnames(temp_df)[j],\"_add\",add_tag )]]\r\n    }\r\n    df_matrix=do.call(cbind.data.frame,inputlist)\r\n    \r\n    df_temp=data.frame(df_matrix)\r\n    colnames(df_temp)=colnames(temp_df)\r\n    df_temp\r\n  })\r\n  \r\n  # Return the reactive that yields the data frame\r\n  return(dataframe)\r\n}\r\n### This app utilize shiny module that can fit for any data.table\r\n### You just need to create your data.table and load it to the same location of your shiny app as note.rds\r\n### Currently, I am working on an elegant way to handle Date format so please convert any date col to character/factor \r\n### before you load the data.table to this app\r\n\r\n### For example:\r\n### DT3=data.table(iris[1:3,])\r\n### saveRDS(DT3, \"path of your shiny app/note.rds\")\r\n\r\n\r\nserver <- shinyServer(function(input, output, session){\r\n  \r\n  ### interactive dataset \r\n  vals_trich<-reactiveValues()\r\n  vals_trich$Data<-readRDS(\"note.rds\")\r\n  \r\n  \r\n  #### MainBody_trich is the id of DT table\r\n  output$MainBody_trich<-renderUI({\r\n    fluidPage(\r\n      hr(),\r\n      column(6,offset = 6,\r\n             HTML('<div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\" style = \"padding:10px\">'),\r\n             ### tags$head() This is to change the color of \"Add a new row\" button\r\n             tags$head(tags$style(\".butt2{background-color:#231651;} .butt2{color: #e6ebef;}\")),\r\n             div(style=\"display:inline-block;width:30%;text-align: center;\",actionButton(inputId = \"Add_row_head\",label = \"Add\", class=\"butt2\") ),\r\n             tags$head(tags$style(\".butt4{background-color:#4d1566;} .butt4{color: #e6ebef;}\")),\r\n             div(style=\"display:inline-block;width:30%;text-align: center;\",actionButton(inputId = \"mod_row_head\",label = \"Edit\", class=\"butt4\") ),\r\n             tags$head(tags$style(\".butt3{background-color:#590b25;} .butt3{color: #e6ebef;}\")),\r\n             div(style=\"display:inline-block;width:30%;text-align: center;\",actionButton(inputId = \"Del_row_head\",label = \"Delete\", class=\"butt3\") ),\r\n             ### Optional: a html button \r\n             # HTML('<input type=\"submit\" name=\"Add_row_head\" value=\"Add\">'),\r\n             HTML('<\/div>') ),\r\n      \r\n      column(12,dataTableOutput(\"Main_table_trich\")),\r\n      tags$script(\"$(document).on('click', '#Main_table_trich button', function () {\r\n                    Shiny.onInputChange('lastClickId',this.id);\r\n                    Shiny.onInputChange('lastClick', Math.random()) });\")\r\n      \r\n    ) \r\n  })\r\n  \r\n  #### render DataTable part ####\r\n  output$Main_table_trich<-renderDataTable({\r\n    DT=vals_trich$Data\r\n    datatable(DT, selection = 'single',\r\n              escape=F, options = list(paging = TRUE,    ## paginate the output\r\n                   pageLength = 15,  ## number of rows to output for each page\r\n                   scrollX = TRUE,   ## enable scrolling on X axis\r\n                   scrollY = TRUE,   ## enable scrolling on Y axis\r\n                   autoWidth = TRUE, ## use smart column width handling\r\n                   server = FALSE,   ## use client-side processing\r\n                   dom = 'Bfrtip',\r\n                   buttons = c('csv', 'excel')),\r\n    editable= 'cell',\r\n    extensions = 'Buttons',\r\n    filter = 'bottom'    ,          ## include column filters at the bottom\r\n    rownames = FALSE                ## don't show row numbers/names\r\n  )})\r\n  \r\n  \r\n  observeEvent(input$Add_row_head, {\r\n    ### This is the pop up board for input a new row\r\n    showModal(modalDialog(title = \"Add a new row\",\r\n                          moduleUI(\"module_input_id\",temp_df=vals_trich$Data, add_tag=input$Add_row_head),\r\n                          actionButton(\"go\", \"Add item\"),\r\n                          easyClose = TRUE, footer = NULL ))\r\n    \r\n  })\r\n  ### Add a new row to DT  \r\n  observeEvent(input$go, {\r\n    datafile <- callModule(module_server, \"module_input_id\", temp_df=vals_trich$Data, add_tag=input$Add_row_head )\r\n    new_row=data.frame( datafile() )\r\n    \r\n    vals_trich$Data<-data.table(rbind(vals_trich$Data, new_row ) )\r\n    removeModal()\r\n  })\r\n\r\n  ### delete selected rows part\r\n  ### this is warning messge for deleting\r\n  observeEvent(input$Del_row_head,{\r\n    showModal(\r\n      if(length(input$Main_table_trich_rows_selected)>=1 ){\r\n        modalDialog(\r\n          title = \"Warning\",\r\n          paste(\"Are you sure delete\",length(input$Main_table_trich_rows_selected),\"rows?\" ),\r\n          footer = tagList(\r\n            modalButton(\"Cancel\"),\r\n            actionButton(\"ok\", \"Yes\")\r\n          ), easyClose = TRUE)\r\n      }else{\r\n        modalDialog(\r\n          title = \"Warning\",\r\n          paste(\"Please select row(s) that you want to delect!\" ),easyClose = TRUE\r\n        )\r\n      }\r\n      \r\n    )\r\n  })\r\n  \r\n  ### If user say OK, then delete the selected rows\r\n  observeEvent(input$ok, {\r\n    vals_trich$Data=vals_trich$Data[-input$Main_table_trich_rows_selected]\r\n    removeModal()\r\n  })  \r\n  \r\n  ### edit button\r\n  observeEvent(input$mod_row_head,{\r\n    showModal(\r\n      if(length(input$Main_table_trich_rows_selected)>=1 ){\r\n        modalDialog(\r\n          fluidPage(\r\n            h3(strong(\"Modification\"),align=\"center\"),\r\n            # moduleUI(\"module_input_id\",temp_df=vals_trich$Data, add_tag=input$Add_row_head),\r\n            dataTableOutput('row_modif'),\r\n            actionButton(\"save_changes\",\"Save changes\"),\r\n            easyClose = TRUE, footer = NULL,\r\n            tags$script(HTML(\"$(document).on('click', 'save_changes', function (){\r\n                             var list_value=[]\r\n                             for (i = 0; i < $( '.new_input' ).length; i++)\r\n                             {\r\n                             list_value.push($( '.new_input' )[i].value)\r\n                             }\r\n                             Shiny.onInputChange('newValue', list_value) });\")) ), size=\"l\" )\r\n      }else{\r\n        modalDialog(\r\n          title = \"Warning\",\r\n          paste(\"Please select the row that you want to edit!\" ),easyClose = TRUE\r\n        )\r\n      }\r\n      \r\n    )\r\n  })\r\n  \r\n  #### modify part\r\n  output$row_modif<-renderDataTable({\r\n    old_row=vals_trich$Data[input$Main_table_trich_rows_selected]\r\n    row_change=list()\r\n    for (i in colnames(old_row)){\r\n      # if (is.numeric(vals_trich$Data[[i]])){\r\n      #   row_change[[i]]<-paste0('<input class=\"new_input\" value= ','\"',old_row[[i]],'\"','  type=\"number\" id=new_',i,' ><br>')\r\n      # } \r\n      # # else if( is.Date(vals_trich$Data[[i]])){\r\n      # #   row_change[[i]]<-paste0('<input class=\"new_input\" value= ','\"',old_row[[i]],'\"',' type=\"date\" id=new_  ',i,'  ><br>') \r\n      # # }\r\n      # else{ \r\n        row_change[[i]]<-paste0('<input class=\"new_input\" value= ','\"',old_row[[i]],'\"',' type=\"textarea\"  id=new_',i,'><br>')\r\n      # }\r\n    }\r\n    row_change=as.data.table(row_change)\r\n    setnames(row_change,colnames(old_row))\r\n    DT=row_change\r\n    DT \r\n  },escape=F,options=list(dom='t',ordering=F,scrollX = TRUE),selection=\"none\" )\r\n  \r\n  ### This is to replace the modified row to existing row\r\n  observeEvent(input$newValue,\r\n               {\r\n                 newValue=lapply(input$newValue, function(col) {\r\n                   if (suppressWarnings(all(!is.na(as.numeric(as.character(col)))))) {\r\n                     as.numeric(as.character(col))\r\n                   } else {\r\n                     col\r\n                   }\r\n                 })\r\n                 DF=data.frame(lapply(newValue, function(x) t(data.frame(x))))\r\n                 colnames(DF)=colnames(vals_trich$Data)\r\n                 vals_trich$Data[input$Main_table_trich_rows_selected]<-DF\r\n               }\r\n  )\r\n\r\n  ### save to RDS part \r\n  observeEvent(input$Updated_trich,{\r\n    saveRDS(vals_trich$Data, \"note.rds\")\r\n    shinyalert(title = \"Saved!\", type = \"success\")\r\n  })\r\n  \r\n  ### This is nothing related to DT Editor but I think it is nice to have a download function in the Shiny so user \r\n  ### can download the table in csv\r\n  output$Trich_csv<- downloadHandler(\r\n    filename = function() {\r\n      paste(\"Trich Project-Progress\", Sys.Date(), \".csv\", sep=\"\")\r\n    },\r\n    content = function(file) {\r\n      write.csv(data.frame(vals_trich$Data), file, row.names = F)\r\n    }\r\n  )\r\n  \r\n})\r\n\r\n\r\n\r\n# Define UI for application that draws a histogram\r\nui <- shinyUI(fluidPage(\r\n  \r\n  # Application title\r\n  titlePanel(\"Literature Review Database Editor\"),\r\n  ### This is to adjust the width of pop up \"showmodal()\" for DT modify table \r\n  tags$head(tags$style(HTML('\r\n                            .modal-lg {\r\n                            width: 800px;\r\n                            }\r\n                            '))),\r\n  helpText(\"Note: Remember to save any updates!\"),\r\n  br(),\r\n  ### tags$head() is to customize the download button\r\n  tags$head(tags$style(\".butt{background-color:#230682;} .butt{color: #e6ebef;}\")),\r\n  downloadButton(\"Trich_csv\", \"Download in CSV\", class=\"butt\"),\r\n  # useShinyalert(), # Set up shinyalert\r\n  uiOutput(\"MainBody_trich\"),actionButton(inputId = \"Updated_trich\",label = \"Save\")\r\n))\r\n\r\nshinyApp(ui = ui, server = server)\r\n\r\n","type":"text"},{"name":"skim_literature.R","content":"# DT3<-readr::read_csv(\r\n#   \"C:/Users/tizge/Downloads/literature.csv\"\r\n# ) %>% \r\n#   unique()\r\n# saveRDS(DT3, \"note.rds\")\r\n\r\n\r\nlibrary(shiny)\r\nlibrary(shinyjs)\r\n## shinysky is to customize buttons\r\nlibrary(shinysky)\r\nlibrary(DT)\r\nlibrary(lubridate)\r\nlibrary(shinyalert)\r\n\r\nrm(list = ls())\r\nuseShinyalert()\r\n### Shiny module \r\n### UI part\r\nmoduleUI <- function(id, temp_df, add_tag ){\r\n  \r\n  ns <- NS(id)\r\n  AA=tagList()\r\n  # return a list of tags\r\n  for (i in 1:length(colnames(temp_df) ) )\r\n  {\r\n    if (is.numeric(temp_df[[i]]))\r\n    {\r\n      AA[[i]]<-numericInput(ns(paste0(colnames(temp_df)[i],\"_add\",add_tag) ), paste0(colnames(temp_df)[i],\":\"),0)\r\n    } \r\n    # else if( is.Date(temp_df[[i]])){\r\n    #   AA[[i]]<-dateInput(paste0(colnames(temp_df)[i],\"_add\",add_tag),paste0(colnames(temp_df)[i],\":\"), Sys.Date())\r\n    # }\r\n    else{ \r\n      AA[[i]]<-textInput(ns(paste0(colnames(temp_df)[i],\"_add\",add_tag)), paste0(colnames(temp_df)[i],\":\") )\r\n    }\r\n  }\r\n  return(AA)\r\n}\r\n\r\n### Server part \r\nmodule_server<- function(input, output, session,temp_df, add_tag) {\r\n  \r\n  \r\n  dataframe=reactive({\r\n    \r\n    inputlist=list()\r\n    for (j in 1:length(colnames(temp_df) ) ){\r\n      inputlist[j]=input[[paste0(colnames(temp_df)[j],\"_add\",add_tag )]]\r\n    }\r\n    df_matrix=do.call(cbind.data.frame,inputlist)\r\n    \r\n    df_temp=data.frame(df_matrix)\r\n    colnames(df_temp)=colnames(temp_df)\r\n    df_temp\r\n  })\r\n  \r\n  # Return the reactive that yields the data frame\r\n  return(dataframe)\r\n}\r\n### This app utilize shiny module that can fit for any data.table\r\n### You just need to create your data.table and load it to the same location of your shiny app as note.rds\r\n### Currently, I am working on an elegant way to handle Date format so please convert any date col to character/factor \r\n### before you load the data.table to this app\r\n\r\n### For example:\r\n### DT3=data.table(iris[1:3,])\r\n### saveRDS(DT3, \"path of your shiny app/note.rds\")\r\n\r\n\r\nserver <- shinyServer(function(input, output, session){\r\n  \r\n  ### interactive dataset \r\n  vals_trich<-reactiveValues()\r\n  vals_trich$Data<-readRDS(\"note.rds\")\r\n  \r\n  \r\n  #### MainBody_trich is the id of DT table\r\n  output$MainBody_trich<-renderUI({\r\n    fluidPage(\r\n      hr(),\r\n      column(6,offset = 6,\r\n             HTML('<div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\" style = \"padding:10px\">'),\r\n             ### tags$head() This is to change the color of \"Add a new row\" button\r\n             tags$head(tags$style(\".butt2{background-color:#231651;} .butt2{color: #e6ebef;}\")),\r\n             div(style=\"display:inline-block;width:30%;text-align: center;\",actionButton(inputId = \"Add_row_head\",label = \"Add\", class=\"butt2\") ),\r\n             tags$head(tags$style(\".butt4{background-color:#4d1566;} .butt4{color: #e6ebef;}\")),\r\n             div(style=\"display:inline-block;width:30%;text-align: center;\",actionButton(inputId = \"mod_row_head\",label = \"Edit\", class=\"butt4\") ),\r\n             tags$head(tags$style(\".butt3{background-color:#590b25;} .butt3{color: #e6ebef;}\")),\r\n             div(style=\"display:inline-block;width:30%;text-align: center;\",actionButton(inputId = \"Del_row_head\",label = \"Delete\", class=\"butt3\") ),\r\n             ### Optional: a html button \r\n             # HTML('<input type=\"submit\" name=\"Add_row_head\" value=\"Add\">'),\r\n             HTML('<\/div>') ),\r\n      \r\n      column(12,dataTableOutput(\"Main_table_trich\")),\r\n      tags$script(\"$(document).on('click', '#Main_table_trich button', function () {\r\n                    Shiny.onInputChange('lastClickId',this.id);\r\n                    Shiny.onInputChange('lastClick', Math.random()) });\")\r\n      \r\n    ) \r\n  })\r\n  \r\n  #### render DataTable part ####\r\n  output$Main_table_trich<-renderDataTable({\r\n    DT=vals_trich$Data\r\n    datatable(DT, selection = 'single',\r\n              escape=F, options = list(paging = TRUE,    ## paginate the output\r\n                   pageLength = 15,  ## number of rows to output for each page\r\n                   scrollX = TRUE,   ## enable scrolling on X axis\r\n                   scrollY = TRUE,   ## enable scrolling on Y axis\r\n                   autoWidth = TRUE, ## use smart column width handling\r\n                   server = FALSE,   ## use client-side processing\r\n                   dom = 'Bfrtip',\r\n                   buttons = c('csv', 'excel')),\r\n    editable= 'cell',\r\n    extensions = 'Buttons',\r\n    filter = 'bottom'    ,          ## include column filters at the bottom\r\n    rownames = FALSE                ## don't show row numbers/names\r\n  )})\r\n  \r\n  \r\n  observeEvent(input$Add_row_head, {\r\n    ### This is the pop up board for input a new row\r\n    showModal(modalDialog(title = \"Add a new row\",\r\n                          moduleUI(\"module_input_id\",temp_df=vals_trich$Data, add_tag=input$Add_row_head),\r\n                          actionButton(\"go\", \"Add item\"),\r\n                          easyClose = TRUE, footer = NULL ))\r\n    \r\n  })\r\n  ### Add a new row to DT  \r\n  observeEvent(input$go, {\r\n    datafile <- callModule(module_server, \"module_input_id\", temp_df=vals_trich$Data, add_tag=input$Add_row_head )\r\n    new_row=data.frame( datafile() )\r\n    \r\n    vals_trich$Data<-data.table(rbind(vals_trich$Data, new_row ) )\r\n    removeModal()\r\n  })\r\n\r\n  ### delete selected rows part\r\n  ### this is warning messge for deleting\r\n  observeEvent(input$Del_row_head,{\r\n    showModal(\r\n      if(length(input$Main_table_trich_rows_selected)>=1 ){\r\n        modalDialog(\r\n          title = \"Warning\",\r\n          paste(\"Are you sure delete\",length(input$Main_table_trich_rows_selected),\"rows?\" ),\r\n          footer = tagList(\r\n            modalButton(\"Cancel\"),\r\n            actionButton(\"ok\", \"Yes\")\r\n          ), easyClose = TRUE)\r\n      }else{\r\n        modalDialog(\r\n          title = \"Warning\",\r\n          paste(\"Please select row(s) that you want to delect!\" ),easyClose = TRUE\r\n        )\r\n      }\r\n      \r\n    )\r\n  })\r\n  \r\n  ### If user say OK, then delete the selected rows\r\n  observeEvent(input$ok, {\r\n    vals_trich$Data=vals_trich$Data[-input$Main_table_trich_rows_selected]\r\n    removeModal()\r\n  })  \r\n  \r\n  ### edit button\r\n  observeEvent(input$mod_row_head,{\r\n    showModal(\r\n      if(length(input$Main_table_trich_rows_selected)>=1 ){\r\n        modalDialog(\r\n          fluidPage(\r\n            h3(strong(\"Modification\"),align=\"center\"),\r\n            # moduleUI(\"module_input_id\",temp_df=vals_trich$Data, add_tag=input$Add_row_head),\r\n            dataTableOutput('row_modif'),\r\n            actionButton(\"save_changes\",\"Save changes\"),\r\n            easyClose = TRUE, footer = NULL,\r\n            tags$script(HTML(\"$(document).on('click', 'save_changes', function (){\r\n                             var list_value=[]\r\n                             for (i = 0; i < $( '.new_input' ).length; i++)\r\n                             {\r\n                             list_value.push($( '.new_input' )[i].value)\r\n                             }\r\n                             Shiny.onInputChange('newValue', list_value) });\")) ), size=\"l\" )\r\n      }else{\r\n        modalDialog(\r\n          title = \"Warning\",\r\n          paste(\"Please select the row that you want to edit!\" ),easyClose = TRUE\r\n        )\r\n      }\r\n      \r\n    )\r\n  })\r\n  \r\n  #### modify part\r\n  output$row_modif<-renderDataTable({\r\n    old_row=vals_trich$Data[input$Main_table_trich_rows_selected]\r\n    row_change=list()\r\n    for (i in colnames(old_row)){\r\n      # if (is.numeric(vals_trich$Data[[i]])){\r\n      #   row_change[[i]]<-paste0('<input class=\"new_input\" value= ','\"',old_row[[i]],'\"','  type=\"number\" id=new_',i,' ><br>')\r\n      # } \r\n      # # else if( is.Date(vals_trich$Data[[i]])){\r\n      # #   row_change[[i]]<-paste0('<input class=\"new_input\" value= ','\"',old_row[[i]],'\"',' type=\"date\" id=new_  ',i,'  ><br>') \r\n      # # }\r\n      # else{ \r\n        row_change[[i]]<-paste0('<input class=\"new_input\" value= ','\"',old_row[[i]],'\"',' type=\"textarea\"  id=new_',i,'><br>')\r\n      # }\r\n    }\r\n    row_change=as.data.table(row_change)\r\n    setnames(row_change,colnames(old_row))\r\n    DT=row_change\r\n    DT \r\n  },escape=F,options=list(dom='t',ordering=F,scrollX = TRUE),selection=\"none\" )\r\n  \r\n  ### This is to replace the modified row to existing row\r\n  observeEvent(input$newValue,\r\n               {\r\n                 newValue=lapply(input$newValue, function(col) {\r\n                   if (suppressWarnings(all(!is.na(as.numeric(as.character(col)))))) {\r\n                     as.numeric(as.character(col))\r\n                   } else {\r\n                     col\r\n                   }\r\n                 })\r\n                 DF=data.frame(lapply(newValue, function(x) t(data.frame(x))))\r\n                 colnames(DF)=colnames(vals_trich$Data)\r\n                 vals_trich$Data[input$Main_table_trich_rows_selected]<-DF\r\n               }\r\n  )\r\n\r\n  ### save to RDS part \r\n  observeEvent(input$Updated_trich,{\r\n    saveRDS(vals_trich$Data, \"note.rds\")\r\n    shinyalert(title = \"Saved!\", type = \"success\")\r\n  })\r\n  \r\n  ### This is nothing related to DT Editor but I think it is nice to have a download function in the Shiny so user \r\n  ### can download the table in csv\r\n  output$Trich_csv<- downloadHandler(\r\n    filename = function() {\r\n      paste(\"Trich Project-Progress\", Sys.Date(), \".csv\", sep=\"\")\r\n    },\r\n    content = function(file) {\r\n      write.csv(data.frame(vals_trich$Data), file, row.names = F)\r\n    }\r\n  )\r\n  \r\n})\r\n\r\n\r\n\r\n# Define UI for application that draws a histogram\r\nui <- shinyUI(fluidPage(\r\n  \r\n  # Application title\r\n  titlePanel(\"Literature Review Database Editor\"),\r\n  ### This is to adjust the width of pop up \"showmodal()\" for DT modify table \r\n  tags$head(tags$style(HTML('\r\n                            .modal-lg {\r\n                            width: 800px;\r\n                            }\r\n                            '))),\r\n  helpText(\"Note: Remember to save any updates!\"),\r\n  br(),\r\n  ### tags$head() is to customize the download button\r\n  tags$head(tags$style(\".butt{background-color:#230682;} .butt{color: #e6ebef;}\")),\r\n  downloadButton(\"Trich_csv\", \"Download in CSV\", class=\"butt\"),\r\n  # useShinyalert(), # Set up shinyalert\r\n  uiOutput(\"MainBody_trich\"),actionButton(inputId = \"Updated_trich\",label = \"Save\")\r\n))\r\n\r\nshinyApp(ui = ui, server = server)\r\n\r\n","type":"text"}]
